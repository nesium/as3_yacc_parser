%{
	
#import "y.tab.h"
#import "Node.h"
#import "IdentifierNode.h"
	
char buf[100000];
char string_start;
char *s;
unsigned int comment_is_multiline;
unsigned int in_comment = 0;

int column, line, charnum;
int col_start, line_start, charnum_start;
void start();
void count();

#undef YY_INPUT
#define YY_INPUT(b,r,s) (r = yyYYINPUT(b,s))

%}

%x COMMENT MSTRING

%%

\/\*						{
								if (!in_comment || !comment_is_multiline)
								{
									BEGIN COMMENT;
									comment_is_multiline = 1;
									in_comment = 1;
									start();
								}
								count();
							}
\/\/						{start(); count(); BEGIN COMMENT; comment_is_multiline = 0; in_comment = 1;}
<COMMENT>\*\/				{count(); if (comment_is_multiline) {in_comment = 0; BEGIN 0;}}
<COMMENT>.					{count();}
<COMMENT>\n					{
								count();
								yylineno++;
								if (!comment_is_multiline)
								{
									in_comment = 0;
									BEGIN 0;
								}
							}
\"|\'						{start(); count(); BEGIN MSTRING; s = buf; string_start = *yytext;}
<MSTRING>\\n 				{count(); *s++ = '\n';}
<MSTRING>\\t 				{count(); *s++ = '\t';}
<MSTRING>\\\"|\\\' 			{count(); *s++ = '\"';}
<MSTRING>\"|\'				{
								count();
								if (*yytext == string_start)
								{
									*s = 0;
									BEGIN 0;
									return STRING;
								}
								else
								{
									*s++ = *yytext;
								}
							}
<MSTRING>\n 				{
								yylineno++;
								printf("found invalid string!\n");
								exit(0);
							}
<MSTRING>. 					{count(); *s++ = *yytext;}
as							{start(); count(); return AS;}
case						{start(); count(); return CASE;}
catch						{start(); count(); return CATCH;}
class 						{start(); count(); return CLASS;}
default						{start(); count(); return DEFAULT;}
delete						{start(); count(); return DELETE;}
do							{start(); count(); return DO;}
dynamic						{start(); count(); return DYNAMIC;}
each						{start(); count(); return EACH;}
else						{start(); count(); return ELSE;}
extends						{start(); count(); return EXTENDS;}
false						{start(); count(); return T_FALSE;}
for							{start(); count(); return FOR;}
function					{start(); count(); return FUNCTION;}
generator					{start(); count(); return GENERATOR;}
get							{start(); count(); return GET;}
if							{start(); count(); return IF;}
implements					{start(); count(); return IMPLEMENTS;}
import						{start(); count(); return IMPORT;}
in							{start(); count(); return IN;}
include						{start(); count(); return INCLUDE;}
instanceof					{start(); count(); return INSTANCEOF;}
internal					{start(); count(); return INTERNAL;}
is							{start(); count(); return IS;}
let							{start(); count(); return LET;}
like						{start(); count(); return LIKE;}
namespace					{start(); count(); return NAMESPACE;}
new							{start(); count(); return NEW;}
null						{start(); count(); return ASNULL;}
override					{start(); count(); return OVERRIDE;}
package						{start(); count(); return PACKAGE;}
private 					{start(); count(); return PRIVATE;}
protected					{start(); count(); return PROTECTED;}
public 						{start(); count(); return PUBLIC;}
return 						{start(); count(); return RETURN;}
set							{start(); count(); return SET;}
standard					{start(); count(); return STANDARD;}
static						{start(); count(); return STATIC;}
strict						{start(); count(); return STRICT;}
super						{start(); count(); return SUPER;}
switch						{start(); count(); return SWITCH;}
this						{start(); count(); return THIS;}
true						{start(); count(); return T_TRUE;}
try							{start(); count(); return TRY;}
type						{start(); count(); return TYPE;}
typeof						{start(); count(); return TYPEOF;}
undefined					{start(); count(); return UNDEFINED;}
use							{start(); count(); return USE;}
var							{start(); count(); return VAR;}
void						{start(); count(); return VOID;}
while						{start(); count(); return WHILE;}
with						{start(); count(); return WITH;}
yield						{start(); count(); return YIELD;}
__proto__					{start(); count(); return PROTO;}
[a-zA-Z_$][a-zA-Z0-9_$]*	{start(); count(); yylval.nodeValue = [IdentifierNode identifierNodeWithCString:yytext]; return IDENT;}
-?[0-9]*\.[0-9]+			{start(); count(); return NUMBER;}
0[xX]([0-9A-Fa-f])+			{start(); count(); return HEX;}
[0-9]+						{start(); count(); return UINT;}
\-?[0-9]+					{start(); count(); return INT;}
"++"						{start(); count(); return INCREMENT;}
"--"						{start(); count(); return DECREMENT;}
"%"							{start(); count(); return yytext[0];}
"+="						{start(); count(); return ADDASN;}
"/="						{start(); count(); return DIVASN;}
"%="						{start(); count(); return MODASN;}
"*="						{start(); count(); return MULASN;}
"-="						{start(); count(); return SUBASN;}
"&="						{start(); count(); return BANDASN;}
"^="						{start(); count(); return XORASN;}
"|="						{start(); count(); return BORASN;}
"&&="						{start(); count(); return LANDASN;}
"||="						{start(); count(); return LORASN;}
"<<"						{start(); count(); return BWLSHIFT;}
"<<="						{start(); count(); return BWLSHIFTASN;}
">>="						{start(); count(); return BWRSHIFTASN;}
">>>="						{start(); count(); return BWURSHIFTASN;}
">>"						{start(); count(); return BWRSHIFT;}
">>>"						{start(); count(); return BWURSHIFT;}
"=="						{start(); count(); return EQ;}
"<="						{start(); count(); return LTE;}
">="						{start(); count(); return GTE;}
"!="						{start(); count(); return NE;}
"!=="						{start(); count(); return SNE;}
"==="						{start(); count(); return SEQ;}
"&&"						{start(); count(); return LAND;}
"||"						{start(); count(); return LOR;}
"::"						{start(); count(); return SCOPE;}
".."						{start(); count(); return DESCENDANT;}
"..."						{start(); count(); return REST;}
"@"							{start(); count(); return yytext[0];}
">"							{start(); count(); return yytext[0];}
"<"							{start(); count(); return yytext[0];}
"&"							{start(); count(); return yytext[0];}
"^"							{start(); count(); return yytext[0];}
"~"							{start(); count(); return yytext[0];}
"|"							{start(); count(); return yytext[0];}
"!"							{start(); count(); return yytext[0];}
";"							{start(); count(); return yytext[0];}
","							{start(); count(); return yytext[0];}
"{"							{start(); count(); return yytext[0];}
"}"							{start(); count(); return yytext[0];}
"("							{start(); count(); return yytext[0];}
")"							{start(); count(); return yytext[0];}
"["							{start(); count(); return yytext[0];}
"]"							{start(); count(); return yytext[0];}
"="							{start(); count(); return yytext[0];}
":"							{start(); count(); return yytext[0];}
"+"							{start(); count(); return yytext[0];}
"-"							{start(); count(); return yytext[0];}
"*"							{start(); count(); return yytext[0];}
"/"							{start(); count(); return yytext[0];}
"."							{start(); count(); return yytext[0];}
"?"							{start(); count(); return yytext[0];}
 \t                         {start(); count();}
\n|\r|\r\n					{start(); count(); yylineno++;}
%%

void yyerror(char *s)
{
	extern Node* yyLastParsedNode;  
	if (yyLastParsedNode != nil) 
	{
		yyLastParsedNode = nil;
	}
	// raise syntax error
	[NSException raise:@"LexSyntaxError" format:@"ERROR: (LINE: %ld, COLUMN: %ld): %s. Unexpected %s\n", 
		(long)line, (long)column, s, yytext];
}

int yywrap() 
{
	return -1;
}

void yyreset_state()
{
	BEGIN(INITIAL);
	line = 1;
	column = 1;
	charnum = 1;
}

void start()
{
	line_start = line;
	col_start = column;
	charnum_start = charnum;
}

void count()
{
    int i;
    for (i = 0; yytext[i] != '\0'; i++)
    {
        if (yytext[i] == '\n')
        {
            line++;
            column = 0;
            charnum++;
        }
        else if (yytext[i] == '\t')
        {
            column += 4 - (column % 4);
            charnum++;
        }
        else
        {
            column++;
            charnum++;
        }
    }

//	yylloc.first_line   = line_start;
//	yylloc.first_column = col_start;
//	yylloc.last_line    = line;
//	yylloc.last_column  = column;
}